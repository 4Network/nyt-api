<script>
import { RouterLink } from "vue-router";
// import { key="HRb1SQE0WMuY63JclAJXBlxHUAPxAfDl" }

export default {
  data() {
    return {
      people: [],
      loading: false,
      next: null,
      previous: null,
    };
  },
  methods: {
    getPeople(url) {
      this.loading = true;
      fetch(url)
        .then((res) => res.json())
        .then((data) => {
          this.people = data.results;
          //guardar as referências par as páginas anteriores
          this.next = data.next;
          this.previous = data.previous;
          this.loading = false;
        });
    },
    handlePrevious() {
      this.getPeople(this.previous);
    },
    handleNext() {
      this.getPeople(this.next);
    },
  },
  mounted() {
    this.getPeople("https://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${this.apiKey}");
  },
};
</script>

<template>
  <main>
    <p>Previous: {{ previous }}</p>
    >
    <p>Next: {{ next }}</p>
    >
    <h3 v-show="loading">Loading...</h3>

    <table v-show="!loading">
      <tr>
        <th>Name</th>
        <th>Gender</th>
        <th>Height</th>
      </tr>
      <tr v-for="person in people" :key="person.name">
        <td>
          <RouterLink :to="`/people/${person.url.split('/')[5]}`">{{
            person.name
          }}</RouterLink>
        </td>
        <td>{{ person.name }}</td>
        <td>{{ person.gender }}</td>
        <td>{{ person.height }}</td>
      </tr>
    </table>
    <div id="buttons-container">
      <button @click="handlePrevious">Previous</button>
      <button @click="handleNext">Next</button>
    </div>
  </main>
</template>

<style></style>



JAVASCRIPT - API NYT



<!-- Demo code sample. Not indended for production use. -->

<button onclick="execute()">Execute</button>

<script>

// WARNING: fetch is not supported in IE, so it may need a polyfill

function execute() {
  const url = "https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key=[YOUR_API_KEY]";
  const options = {
    method: "GET",
    headers: {
      "Accept": "application/json"
    },
  };
  fetch(url, options).then(
    response => {
      if (response.ok) {
        return response.text();
      }
      return response.text().then(err => {
        return Promise.reject({
          status: response.status,
          statusText: response.statusText,
          errorMessage: err,
        });
      });
    })
    .then(data => {
      console.log(data);
    })
    .catch(err => {
      console.error(err);
    });
}

</script>








MODELO PARA LIVROS (RAFA):


<script>
export default {
  data() {
    return {
      apiKey: 'DfAI0teJCa28uw06owBfsF00xcyXoW7p',
      livros: {
        info: []
      }
    };
  },
  mounted() {
    this.getBooks();
  },
  methods: {
    getBooks() {
      fetch(https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=${this.apiKey})
        .then((res) => res.json())
        .then((data) => {
          const bookDetails = data.results.books.map((book) => ({
            Título: book.title,
            Autor: book.author,
            Ranking: book.rank,
          }));
          this.livros.info = bookDetails;
        });
    },
  },
};
</script>

<template>
  <div>
    <div v-for="(book, index) in livros.info" :key="index">
      <div v-for="(value, label) in book" :key="label">
        {{ label }}: {{ value }}
      </div>
      <hr color="lightgreen"/>
    </div>
  </div>
</template>



<h3>{{ articlesOrgHTML(article.title) }}</h3>

<h3><a :href="articlesOrgHTML(article.url)">{{ articlesOrgHTML(article.title) }}</a></h3>






HomeView.vue (06062023)

<script>
 
export default {
  data() {
    return {
      apiKey: 'OCuAzfRfKVr1HDAkN1lCOImvrRs8Rlwm',
      sections: ['arts','automobiles','business','fashion','food','health','home','insider','magazine', 'movies','nyregion','obituaries','opinion','politics','realestate','science','sports','sundayreview','technology','theater','t-magazine','travel','upshot','us','world'],
      articles: {},
      loading: false,
      next: null,
      previous: null,

    };
  },
  created() {
// para cada tema, buscar artigos
    this.sections.forEach(section => {
      this.getArticles(section);
    });
  },
  methods: {
    getArticles(section) {
// fetch() para fazer a solicitação HTTP
      fetch(`https://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${this.apiKey}`)
        .then(response => response.ok ? response.json() : Promise.reject(response))
        .then(data => {
          let firstFew = this.getFewArticles(data.results);
          this.articles[section] = firstFew; // Substituído por atribuição direta
          
        })
        .catch(err => {
          console.log('Cannot display stories', err);
        })
    },
    
    getFewArticles(articles) {
      return articles.slice(1, 10);
    },
    articlesOrgHTML(str) {
      let temp = document.createElement('div');
      temp.textContent = str;
      return temp.innerHTML;
    }
  }
};
</script>

<template>

    <div id="app">
      <div v-for="section in sections" :key="section">
        <h2>{{ section }}</h2>
        <article v-for="article in articles[section]" :key="article.title">
          <h3>{{ articlesOrgHTML(article.title) }}</h3>
          <p>Article: {{ articlesOrgHTML(article.byline) }}</p>
          <p>Published date: {{ articlesOrgHTML(article.published_date) }}</p>
          <p>Updated date: {{ articlesOrgHTML(article.updated_date) }}</p>
          <p>Abstract: {{ articlesOrgHTML(article.abstract) }}</p>
          <p>Subsection: {{ articlesOrgHTML(article.subsection) }}</p>
        </article>

      </div>
    </div>
    
    <div id="buttons-container">
      <button @click="handlePrevious">Previous</button>
      <button @click="handleNext">Next</button>
    </div>

  </template>
  
  <style>
h2 {
  color: rgb(14, 14, 199);
}

h3 {
  color: green;
  font-size: 18px;

}

@media print {
  text {page-break-after: auto}
}



</style>




HomeView.vue (07062023) ajustado mas não utilizado, pq só abriu os tópicos dos artigos

<script>

export default {
  data() {
    return {
      apiKey: 'OCuAzfRfKVr1HDAkN1lCOImvrRs8Rlwm',
      sections: ['arts','automobiles','business','fashion','food','health','home','insider','magazine', 'movies','nyregion','obituaries','opinion','politics','realestate','science','sports','sundayreview','technology','theater','t-magazine','travel','upshot','us','world'],
      articles: {},
      loading: false,
      next: null,
      previous: null,

    };
  },

  created() {
// para cada tema, buscar artigos
    this.sections.forEach(section => {
      this.getArticles(section);
    });
  }, 

  methods: {
    getArticles(section) {
      this.loading = true;
      fetch(`https://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${this.apiKey}`)
        .then((res) => res.json())
        .then((data) => {
          this.article = data.results;
          //guardar as referências par as páginas anteriores
          this.next = data.next;
          this.previous = data.previous;
          this.loading = false;
        })
        .catch(err => {
          console.log('Cannot display stories', err);
        })
    },
    getFewArticles(articles) {
      return articles.slice(10, 10000);
    },
    articlesOrgHTML(str) {
      let temp = document.createElement('div');
      temp.textContent = str;
      return temp.innerHTML;
    },


    handlePrevious() {
      this.getArticles(this.previous);
    },
    handleNext() {
      this.getFewArticles(this.next);
    },
  },
  mounted() {
    this.getArticles(`https://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${this.apiKey}`);
  },
};

</script>




No AboutView.vue guarcar comando para abrir artigos e fechar o aberto anteriormente (07/06/2023):

<template>
  <div id="app">
    <div v-for="section in sections" :key="section">
      <h2 @click="toggleSection(section)">{{ section }}</h2>
      <article
        v-show="activeSection ==this.articles[section]?.show"
        v-for="article in articles[section]"
        :key="article.title"
      >
        <h3>{{ articlesOrgHTML(article.title) }}</h3>
        <p>Article: {{ articlesOrgHTML(article.byline) }}</p>
        <p>Published date: {{ articlesOrgHTML(article.published_date) }}</p>
        <p>Updated date: {{ articlesOrgHTML(article.updated_date) }}</p>
        <p>Abstract: {{ articlesOrgHTML(article.abstract) }}</p>
        <p>Subsection: {{ articlesOrgHTML(article.subsection) }}</p>
      </article>
    </div>
  </div>

  <!-- <div id="buttons-container">
    <button @click="handlePrevious">Previous</button>
    <button @click="handleNext">Next</button>
  </div> -->
</template>








AQUIVO ENVIAR À RAFA (07/06/2023)


<script>
export default {
  data() {
    return {
      apiKey: "OCuAzfRfKVr1HDAkN1lCOImvrRs8Rlwm",
      sections: [
        "arts",
        "automobiles",
        "business",
        "fashion",
        "food",
        "health",
        "home",
        "insider",
        "magazine",
        "movies",
        "nyregion",
        "obituaries",
        "opinion",
        "politics",
        "realestate",
        "science",
        "sports",
        "sundayreview",
        "technology",
        "theater",
        "t-magazine",
        "travel",
        "upshot",
        "us",
        "world",
      ],
      articles: {},

      loading: false,
      next: null,
      previous: null,
    };
  },

  created() {
    // para cada tema, buscar artigos
    this.sections.forEach((section) => {
      this.getArticles(section);
    });
  },

  methods: {
    getArticles(section) {
      // fetch() para fazer a solicitação HTTP
      fetch(
        `https://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${this.apiKey}`
      )
        .then((response) =>
          response.ok ? response.json() : Promise.reject(response)
        )
        .then((data) => {
          let firstFew = this.getFewArticles(data.results);
          this.articles[section] = firstFew; // Substituído por atribuição direta
          this.articles[section].show = false;
        })
        .catch((err) => {
          console.log("Cannot display stories", err);
        });
    },
    toggleSection(section) {
      this.articles[section].show = !this.articles[section].show;
      if ()
      return
      
    },
    getFewArticles(articles) {
      return articles.slice(1, 10);
    },
    articlesOrgHTML(str) {
      let temp = document.createElement("div");
      temp.textContent = str;
      return temp.innerHTML;
    },

    handlePrevious() {
      this.getArticles(this.previous);
    },
    handleNext() {
      this.getFewArticles(this.next);
    },
  },
  mounted() {
    this.getArticles(
      "https://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${this.apiKey}"
    );
  },
};
</script>

<template>
  <div id="app">
    <div v-for="section in sections" :key="section">
      <h2 @click="toggleSection(section)">{{ section }}</h2>
      <article
        v-show="activeSection == section"
        v-for="article in articles[section]"
        :key="article.title"
      >
        <h3>{{ articlesOrgHTML(article.title) }}</h3>
        <p>Article: {{ articlesOrgHTML(article.byline) }}</p>
        <p>Published date: {{ articlesOrgHTML(article.published_date) }}</p>
        <p>Updated date: {{ articlesOrgHTML(article.updated_date) }}</p>
        <p>Abstract: {{ articlesOrgHTML(article.abstract) }}</p>
        <p>Subsection: {{ articlesOrgHTML(article.subsection) }}</p>
      </article>
    </div>
  </div>

  <!-- <div id="buttons-container">
    <button @click="handlePrevious">Previous</button>
    <button @click="handleNext">Next</button>
  </div> -->
</template>

